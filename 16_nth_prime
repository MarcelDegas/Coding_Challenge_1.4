# Write a method that returns the `n`th prime number. Recall that only
# numbers greater than 1 can be prime.
#
# Difficulty: medium.

# You may use our `is_prime?` solution.
def is_prime?(number)
  if number <= 1
    # only numbers > 1 can be prime.
    return false
  end

  idx = 2
  while idx < number
    if (number % idx) == 0
      return false
    end

    idx += 1
  end

  return true
end

def nth_prime(n)
    prime_numbers = 0
    current_prime = 0
    
    i = 0
    while i < 100
      if is_prime?(i) == true
          current_prime = i
          prime_numbers += current_prime
      end 
      
      i2 = 0
      while i2 < n
        solution = prime_numbers[n]
        i2 += 1
      end
      
      i += 1
    end
    
    return solution
end 

#ideas: We have the method to return if a number is prime or not.  We can iterate 
# through a list of numbers 
#variable: 

# These are tests to check that your code is working. After writing
# your solution, they should all print true.


puts('nth_prime(1) == 2: ' + (nth_prime(1) == 2).to_s)
puts('nth_prime(2) == 3: ' + (nth_prime(2) == 3).to_s)
puts('nth_prime(3) == 5: ' + (nth_prime(3) == 5).to_s)
puts('nth_prime(4) == 7: ' + (nth_prime(4) == 7).to_s)
puts('nth_prime(5) == 11: ' + (nth_prime(5) == 11).to_s)

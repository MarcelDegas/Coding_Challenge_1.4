# Write a method that takes in a string of lowercase letters (no
# uppercase letters, no repeats). Consider the *substrings* of the
# string: consecutive sequences of letters contained inside the string.
# Find the longest such string of letters that is a palindrome.
#
# Note that the entire string may itself be a palindrome.
#
# You may want to use Array's `slice(start_index, length)` method,
# which returns a substring of length `length` starting at index
# `start_index`:
#
#     "abcd".slice(1, 2) == "bc"
#     "abcd".slice(1, 3) == "bcd"
#     "abcd".slice(2, 1) == "c"
#     "abcd".slice(2, 2) == "cd"
#
# Difficulty: hard.

def palindrome?(string)
  i = 0
  while i < string.length
    if string[i] != string[(string.length - 1) - i]
      return false
    end

    i += 1
  end

  return true
end

def longest_palindrome(string)
  longest_palindrome = nil
  i = 0 
  while i < string.length
    length = 1
    
    while (i + length) <= string.length
      substring = string.slice(i, length)
      
      if (palindrome?(substring) == true) && ((longest_palindrome == nil) || (substring.length > longest_palindrome.length))
        longest_palindrome = substring
      end
      length += 1
    end
    i += 1
  end
  return longest_palindrome 
end
#inputs: a string of lowercase letters
#process: iterate through the string one letter at a time.  While the first loop is on one letter
# a second loop iterates from letter to length and slices it piece = str.slice(idx1, length).  Then set a conditional
# if palindrome(piece) == true && if (longest_palindrome == nil) || (piece.length > longest_palindrome)

#outputs: a string(the longest palindrome in string)

# These are tests to check that your code is working. After writing
# your solution, they should all print true.

puts(
  'longest_palindrome("abcbd") == "bcb": ' +
  (longest_palindrome('abcbd') == 'bcb').to_s
)
puts(
  'longest_palindrome("abba") == "abba": ' +
  (longest_palindrome('abba') == 'abba').to_s
)
puts(
  'longest_palindrome("abcbdeffe") == "effe": ' +
  (longest_palindrome('abcbdeffe') == 'effe').to_s
)
